#region

using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using ExitGames.Client.Photon;
using GorillaGameModes;
using Photon.Pun;
using Photon.Realtime;
using StealLol.Utilities.Modules;
using UnityEngine;
using static Utilities.Modules.PhotonManager;
using Random = UnityEngine.Random;

#endregion

namespace StealLol.Functions.Mods.Player
{
    internal class GamemodeExploits
    {
        private static MethodInfo onSerilizeWrite_cache;
        private static FieldInfo mixedModeIsReliable_cache;

        public static PhotonView GameModeView
        {
            get
            {
                var go = GameObject.Find("Player Objects/RigCache/Network Parent/GameMode(Clone)");
                if (go)
                    if (go.GetComponent<PhotonView>())
                        return go.GetComponent<PhotonView>();

                return null;
            }
        }

        public static void Tag(VRRig rig)
        {
            if (GorillaGameManager.instance is GorillaTagManager gtm)
            {
                if (!gtm.currentInfected.Contains(rig.Creator))
                {
                    if (PhotonNetwork.IsMasterClient)
                    {
                        if (gtm.isCurrentlyTag)
                        {
                            gtm.ChangeCurrentIt(rig.Creator);
                            return;
                        }

                        gtm.currentInfected.Add(rig.Creator);
                    }
                    else
                    {
                        typeof(PhotonNetwork).GetMethod("RunViewUpdate", BindingFlags.Static | BindingFlags.NonPublic)
                            .Invoke(typeof(PhotonNetwork), Array.Empty<object>());
                        GorillaTagger.Instance.offlineVRRig.transform.position = rig.transform.position;
                        GorillaTagger.Instance.offlineVRRig.rightHand.rigTarget.position = rig.transform.position;
                        GorillaTagger.Instance.offlineVRRig.leftHand.rigTarget.position = rig.transform.position;
                        typeof(PhotonNetwork).GetMethod("RunViewUpdate", BindingFlags.Static | BindingFlags.NonPublic)
                            .Invoke(typeof(PhotonNetwork), Array.Empty<object>());
                        GameMode.ReportTag(rig.Creator);
                    }
                }
            }
            else if (GorillaTagManager.instance is GorillaHuntManager ghm)
            {
                if (!ghm.currentHunted.Contains(rig.Creator))
                {
                    if (PhotonNetwork.IsMasterClient)
                    {
                        ghm.currentHunted.Add(rig.Creator);
                    }
                    else
                    {
                        typeof(PhotonNetwork).GetMethod("RunViewUpdate", BindingFlags.Static | BindingFlags.NonPublic)
                            .Invoke(typeof(PhotonNetwork), Array.Empty<object>());
                        GorillaTagger.Instance.offlineVRRig.transform.position = rig.transform.position;
                        GorillaTagger.Instance.offlineVRRig.rightHand.rigTarget.position = rig.transform.position;
                        GorillaTagger.Instance.offlineVRRig.leftHand.rigTarget.position = rig.transform.position;
                        typeof(PhotonNetwork).GetMethod("RunViewUpdate", BindingFlags.Static | BindingFlags.NonPublic)
                            .Invoke(typeof(PhotonNetwork), Array.Empty<object>());
                        GameMode.ReportTag(rig.Creator);
                    }
                }
            }
            else if (GorillaTagManager.instance is GorillaPaintbrawlManager gpm)
            {
                if (gpm.playerLives[rig.Creator.ActorNumber] > 0)
                {
                    if (PhotonNetwork.IsMasterClient)
                    {
                        gpm.playerLives[rig.Creator.ActorNumber] = 0;
                    }
                    else
                    {
                        typeof(PhotonNetwork).GetMethod("RunViewUpdate", BindingFlags.Static | BindingFlags.NonPublic)
                            .Invoke(typeof(PhotonNetwork), Array.Empty<object>());
                        GorillaTagger.Instance.offlineVRRig.transform.position = rig.transform.position;
                        GorillaTagger.Instance.offlineVRRig.rightHand.rigTarget.position = rig.transform.position;
                        GorillaTagger.Instance.offlineVRRig.leftHand.rigTarget.position = rig.transform.position;
                        typeof(PhotonNetwork).GetMethod("RunViewUpdate", BindingFlags.Static | BindingFlags.NonPublic)
                            .Invoke(typeof(PhotonNetwork), Array.Empty<object>());
                        GameModeView.SendUnlimmitedRPC("RPC_ReportSlingshotHit", RpcTarget.MasterClient, new object[]
                        {
                            rig.Creator,
                            rig.transform.position,
                            Random.Range(0, 2000)
                        });
                    }
                }
            }
        }

        public static void SerilizeOneView(PhotonView pv)
        {
            try
            {
                if (mixedModeIsReliable_cache == null)
                    mixedModeIsReliable_cache = typeof(PhotonView).GetField("mixedModeIsReliable",
                        BindingFlags.Instance | BindingFlags.NonPublic);
                if (onSerilizeWrite_cache == null)
                    onSerilizeWrite_cache = typeof(PhotonNetwork).GetMethod("OnSerializeWrite",
                        BindingFlags.Static | BindingFlags.NonPublic, default, new[]
                        {
                            typeof(PhotonView)
                        }, null);
                if (onSerilizeWrite_cache == null || mixedModeIsReliable_cache == null)
                {
                    Console.WriteLine("Could not serilize " + pv.name);
                    return;
                }

                var list = (List<object>)onSerilizeWrite_cache.Invoke(typeof(PhotonNetwork), new object[]
                {
                    pv
                });
                var shouldBeReliable = pv.Synchronization == ViewSynchronization.ReliableDeltaCompressed ||
                                       (bool)mixedModeIsReliable_cache.GetValue(pv);
                PhotonNetwork.NetworkingClient.OpRaiseEvent(shouldBeReliable ? (byte)206 : (byte)201, new object[]
                {
                    PhotonNetwork.ServerTimestamp,
                    null,
                    list.Prepend(pv.ViewID).ToArray()
                }, new RaiseEventOptions
                {
                    InterestGroup = pv.Group
                }, shouldBeReliable ? SendOptions.SendReliable : SendOptions.SendUnreliable);
                Console.WriteLine(list.ToJson());
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.ToJson());
            }
        }

        public static void TagGun()
        {
            var data = GunLib.ShootLocked();
            if (data.lockedPlayer)
                Tag(data.lockedPlayer);
        }

        public static void TagAll()
        {
            foreach (var rig in GorillaParent.instance.vrrigs)
                Tag(rig);
        }

        public static void UntagGun()
        {
            if (!PhotonNetwork.IsMasterClient) return;
            var data = GunLib.ShootLocked();
            if (data.lockedPlayer)
            {
                if (GorillaGameManager.instance is GorillaTagManager gtm)
                {
                    if (gtm.isCurrentlyTag)
                    {
                        gtm.currentIt = null;
                        return;
                    }

                    if (gtm.currentInfected.Contains(data.lockedPlayer.Creator))
                        gtm.currentInfected.Remove(data.lockedPlayer.Creator);
                }
                else if (GorillaTagManager.instance is GorillaHuntManager ghm)
                {
                    if (ghm.currentHunted.Contains(data.lockedPlayer.Creator))
                        ghm.currentHunted.Remove(data.lockedPlayer.Creator);
                }
                else if (GorillaTagManager.instance is GorillaPaintbrawlManager gpm)
                {
                    if (gpm.playerLives[data.lockedPlayer.Creator.ActorNumber] < 3)
                        gpm.playerLives[data.lockedPlayer.Creator.ActorNumber] = 3;
                }
            }
        }

        public static void UntagSelf()
        {
            if (!PhotonNetwork.IsMasterClient) return;
            if (GorillaGameManager.instance is GorillaTagManager gtm)
            {
                if (gtm.isCurrentlyTag)
                {
                    gtm.currentIt = null;
                    return;
                }

                if (gtm.currentInfected.Contains(PhotonNetwork.LocalPlayer))
                    gtm.currentInfected.Remove(PhotonNetwork.LocalPlayer);
            }
            else if (GorillaTagManager.instance is GorillaHuntManager ghm)
            {
                if (!ghm.currentHunted.Contains(PhotonNetwork.LocalPlayer))
                    ghm.currentHunted.Add(PhotonNetwork.LocalPlayer);
            }
            else if (GorillaTagManager.instance is GorillaPaintbrawlManager gpm)
            {
                if (gpm.playerLives[PhotonNetwork.LocalPlayer.ActorNumber] < 3)
                    gpm.playerLives[PhotonNetwork.LocalPlayer.ActorNumber] = 3;
            }
        }

        public static void AntiTag()
        {
            UntagSelf();
        }
    }
}